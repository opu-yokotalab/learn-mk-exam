SOURCE(根):
根。ファイル一つ分のデータを全て包含するノード。

FUNC(関数):
関数根。関数一つ分のデータを包含。関数名や返戻値の型も含む。
直下の子としてTYPE,(関数名IDENTIFIER),ARGUMENTS,BLOCKを持つ。

BODY:
使われてない(元BLOCK)

DECLARATION(宣言):
宣言根。宣言一つ分(セミコロンまで)のデータを包含。
直下の子としてTYPE,DECLARATORを持つ。

EXPRESSION(式):
式根。式一つ分のデータを包含。式の定義はパーサによる。

STATEMENT(文):
文根。構文、複合文などを統括しているノード。
BLOCK一つにつき一つ含まれている。

BLOCK({}):
{}内の要素すべてを包含しているノード。
直下の子としてDECLARATIONとSTATEMENTを持つ。

ARGUMENTS(引数群):
引数全てを子孫に持つノード。(ただし関数一つ分)

RVALUE(右辺値):
右辺の値を指す。ASSIGNMENTの左の子が単純な場合(LASSIGNMENTが登場しない場合)は、これがRASSIGNMENTの役割を持つ。(統一するべき？)
代入以外の演算子では、関係演算子のみの使用。

FOR(for文):
FOR文の全体を包含するノード。
３番目の式(再初期化式？)だけは、省略されるとノードそのものがなくなる。要解決？

ASSIGNMENT(代入):
代入根。右辺から左辺へ代入することを表わしている。
直下の子としてLASSIGNMENT,RASSIGNMENTを持つ。

LVALUE(左辺値):
現在は使われていない。

LASSIGNMENT(代入左):
代入根の左の子
に見えるけど実は宣言時の初期化専用

RASSIGNMENT(代入右):
上に同じ

ARRAY(配列):
配列の要素数を子に持つ。配列名とは兄弟の関係。

STRUCT(構造体):
typedef非推奨。基本的に型として扱われるので、TYPEの子になる。
直下の子として構造体名、MEMBER(これはDECLARATION木のみ)持つ。

WHILE(while):
while文です。

DO(do):
使ってない

SWITCH(switch):
switch文です。

IF(if):
if文です。実行文はTHENで指す。

DOWHILE(do while):
do-while文です。EXPRESSIONが条件式、BLOCKまたはSTATEMENT(EXPRESSION)が実行文を指す。

THEN(then):
if文の実行文を指す。ただし意味があるのかは不明。

ELSE(else):
else文です。IFの子要素。

BREAK(break):
break文です。意味があるのかは不明。
CASE文の子孫に持って行く方法を考え中。(意味があるのかは不明)

CONTINUE(continue):
continue文です。意味があるのかは不明。

NONE(無):
何もないことを表わす。
具体的には、
・配列の宣言で要素数を指定しない
・関数で引数がない
・;だけの式(文？)for文のこれ→for(;;)
以上。(他にないとも言い切れない・・・)

MEMBER(メンバ):
構造体のメンバを指す。構造体の宣言時に出現。
仕組みはDECLARATIONと同じで、MEMBER一つにつき一つのメンバ(セミコロンまで)を包含する。

CASE(case):
case文です。一つ目の子が判定式、二つ目の子(EXPRESSION or STATEMENT)が実行文。(わかりづらい？)
子孫にbreakが来ない仕様。(訂正したい)

DEFAULT(default):
default文です。

UNARYPLUS(単項＋):
++iの++部分の置換

UNARYMINUS(単項-):
--iの--部分の置換

TYPE(型):
型の根。STRUCTが子になることも。
型名が長い場合(long intなど)は、子として兄弟の状態で持つ。

DECLARATOR(宣言子):
DECLARATION木にて、TYPEと兄弟になる節。子孫に宣言子(変数名)を持つ。

CAST(キャスト):
キャスト。直下の子としてTYPEとキャストされる何かが来る。

FUNCNAME:
未使用

CONSTANT(定数):
子が定数であることを表わしている。

IDENT:
未使用

AMP(&):
&(アンド演算子)の置換

ARGUMENT(引数):
引数一つを指す。ただし関数宣言のみ。(要は引数に型が絡む時)

GLOBAL(グローバル):
グローバルな領域であることを示す。

PARENTHESIS(括弧):
構文の条件式などを結ぶ括弧

CONSTANTEX(定数式):
case文の定数式専用ノード

TYPEDEF(typedef):
TYPEとDECLARATORを子に持つ

NAME(名前):
構造体の名前

/*以下後付けノード(XML化時に置換されるもの)*/

VARIABLE(変数):
変数名の親。関数名も含まれる。

PLUSE(+=):
plus equal

PLUS(+):
plus
要LR

MINUSE(-=):
minus equal

MINUS(-):
minus
要LR

EQUAL(==):
equal(関係演算子の方)
要LR

SHIFTLEFTE(<<=):
shift left equal(左シフト)

SHIFTLEFT(<<):
shift left(左シフト)
要LR

FORE(<=):
fewer or equal
要LR

FEWER(<):
fewer
要LR

SHIFTRIGHTE(>>=):
shift right equal(右シフト)

SHIFTRIGHT(>>):
shift right(右シフト)
要LR

BORE(>=):
bigger or equal
要LR

GREATER(>):
greater
要LR

ANDE(&=):
and equal

AND(&&):
and
要LR

SAND(&):
single and
要LR

MTE(^=):
mountain(?) equal

MT(^):
mountain(?)
要LR

PIPEE(|=):
pipe equal

PIPE(||):
pipe
要LR

SPIPE(|):
single pipe
要LR

QUESTION(?):
question

CORON(:):
coron

TIRUDA(~):
tiruda (つづりあやしい)

NOTE(!=):
not equal
要LR

NOT(!):
not

RESTE(%=):
rest equal

REST(%):
rest(余り)
要LR

DIVE(/=):
division equal

DIV(/):
division(※XHTML化の時にややこしくなるようなら変更する)
要LR

BREAK(break);
break文。空要素

TYPEDEF(typedef):
typedef。ただし使わない方が安全

POINTER(*):
ポインタ。空要素。ポインタが変数扱いになっていた為の処置。

RETURN(return):
return ; の時

POSTFIXPLUS(後置+):
i++の++部分の置換

POSTFIXMINUS(後置-):
i--の--部分の置換

ARROW(->):
アロー演算子

MULTIE(*=):
Multiplication equal

MULTI(*):
Multiplication
要LR

DQUOTATION("):
Double Quotation
ダブルクォーテーション

DOT(.):
ドット演算子

STRING(文字列)：
一つの文字列の根。CONSTANTを親に持ち、文字列要素とFORMATを子に持つ。

FORMAT(フォーマット指定子)：
フォーマット指定子を子に持つ
フォーマット指定子とは　%[0-9a-zA-Z[+][-][.]]+ を指す。


/*以下さらに後付けノード(id付与時に追加されるもの)*/

STRUCTNAME(構造体名):
構造体の名前

STMEMBER(構造体メンバ):
構造体のメンバ

FNAME(関数名):
関数の名前


/*以下仕上げのノード(問題作成時に追加されるノード)*/

hole(穴あけ箇所)：
(仮)

NODE(ノード)：
存在意義を疑ってきた

